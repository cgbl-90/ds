"use strict";(globalThis.webpackChunk_mention_me_frontend=globalThis.webpackChunk_mention_me_frontend||[]).push([["1320"],{"../node_modules/dagre-d3-es/src/graphlib/json.js":function(e,t,n){n.d(t,{c:function(){return l}});var r=n("../node_modules/lodash-es/isUndefined.js"),i=n("../node_modules/lodash-es/clone.js"),d=n("../node_modules/lodash-es/map.js");function l(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:function(e){return d.Z(e.nodes(),function(t){var n=e.node(t),i=e.parent(t),d={v:t};return!r.Z(n)&&(d.value=n),!r.Z(i)&&(d.parent=i),d})}(e),edges:function(e){return d.Z(e.edges(),function(t){var n=e.edge(t),i={v:t.v,w:t.w};return!r.Z(t.name)&&(i.name=t.name),!r.Z(n)&&(i.value=n),i})}(e)};return!r.Z(e.graph())&&(t.value=i.Z(e.graph())),t}n("../node_modules/dagre-d3-es/src/graphlib/graph.js")},"../node_modules/lodash-es/clone.js":function(e,t,n){n.d(t,{Z:function(){return i}});var r=n("../node_modules/lodash-es/_baseClone.js");let i=function(e){return(0,r.Z)(e,4)}},"../node_modules/mermaid/dist/index-9620d214.js":function(e,t,n){n.d(t,{r:function(){return D}});var r=n("../node_modules/dagre-d3-es/src/dagre/index.js"),i=n("../node_modules/dagre-d3-es/src/graphlib/json.js"),d=n("../node_modules/mermaid/dist/edges-5962ec63.js"),l=n("../node_modules/mermaid/dist/mermaid-2490e8f2.js"),a=n("../node_modules/dagre-d3-es/src/graphlib/index.js"),o=n("../node_modules/mermaid/dist/createText-4a4f35c9.js"),s=n("../node_modules/d3/src/index.js");let c={},h={},g={},f=()=>{h={},g={},c={}},u=(e,t)=>(l.l.trace("In isDescendant",t," ",e," = ",h[t].includes(e)),!!h[t].includes(e)||!1),w=(e,t)=>(l.l.info("Descendants of ",t," is ",h[t]),l.l.info("Edge is ",e),e.v!==t&&e.w!==t&&(h[t]?h[t].includes(e.v)||u(e.v,t)||u(e.w,t)||h[t].includes(e.w):(l.l.debug("Tilt, ",t,",not in descendants"),!1))),p=(e,t,n,r)=>{l.l.warn("Copying children of ",e,"root",r,"data",t.node(e),r);let i=t.children(e)||[];e!==r&&i.push(e),l.l.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach(i=>{if(t.children(i).length>0)p(i,t,n,r);else{let d=t.node(i);l.l.info("cp ",i," to ",r," with parent ",e),n.setNode(i,d),r!==t.parent(i)&&(l.l.warn("Setting parent",i,t.parent(i)),n.setParent(i,t.parent(i))),e!==r&&i!==e?(l.l.debug("Setting parent",i,e),n.setParent(i,e)):(l.l.info("In copy ",e,"root",r,"data",t.node(e),r),l.l.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));let a=t.edges(i);l.l.debug("Copying Edges",a),a.forEach(i=>{l.l.info("Edge",i);let d=t.edge(i.v,i.w,i.name);l.l.info("Edge data",d,r);try{w(i,r)?(l.l.info("Copying as ",i.v,i.w,d,i.name),n.setEdge(i.v,i.w,d,i.name),l.l.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):l.l.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(e){l.l.error(e)}})}l.l.debug("Removing node",i),t.removeNode(i)})},m=(e,t)=>{let n=t.children(e),r=[...n];for(let i of n)g[i]=e,r=[...r,...m(i,t)];return r},v=(e,t)=>{l.l.trace("Searching",e);let n=t.children(e);if(l.l.trace("Searching children of id ",e,n),n.length<1)return l.l.trace("This is a valid node",e),e;for(let r of n){let n=v(r,t);if(n)return l.l.trace("Found replacement for",e," => ",n),n}},y=e=>c[e]&&c[e].externalConnections?c[e]?c[e].id:e:e,x=(e,t)=>{if(!e||t>10){l.l.debug("Opting out, no graph ");return}l.l.debug("Opting in, graph ");for(let t of(e.nodes().forEach(function(t){e.children(t).length>0&&(l.l.warn("Cluster identified",t," Replacement id in edges: ",v(t,e)),h[t]=m(t,e),c[t]={id:v(t,e),clusterData:e.node(t)})}),e.nodes().forEach(function(t){let n=e.children(t),r=e.edges();n.length>0?(l.l.debug("Cluster identified",t,h),r.forEach(e=>{if(e.v!==t&&e.w!==t){let n=u(e.v,t);n^u(e.w,t)&&(l.l.warn("Edge: ",e," leaves cluster ",t),l.l.warn("Descendants of XXX ",t,": ",h[t]),c[t].externalConnections=!0)}})):l.l.debug("Not a cluster ",t,h)}),Object.keys(c))){let n=c[t].id,r=e.parent(n);r!==t&&c[r]&&!c[r].externalConnections&&(c[t].id=r)}e.edges().forEach(function(t){let n=e.edge(t);l.l.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),l.l.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,i=t.w;if(l.l.warn("Fix XXX",c,"ids:",t.v,t.w,"Translating: ",c[t.v]," --- ",c[t.w]),c[t.v]&&c[t.w]&&c[t.v]===c[t.w]){l.l.warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),l.l.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=y(t.v),i=y(t.w),e.removeEdge(t.v,t.w,t.name);let d=t.w+"---"+t.v;e.setNode(d,{domId:d,id:d,labelStyle:"",labelText:n.label,padding:0,shape:"labelRect",style:""});let a=structuredClone(n),o=structuredClone(n);a.label="",a.arrowTypeEnd="none",o.label="",a.fromCluster=t.v,o.toCluster=t.v,e.setEdge(r,d,a,t.name+"-cyclic-special"),e.setEdge(d,i,o,t.name+"-cyclic-special")}else(c[t.v]||c[t.w])&&(l.l.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=y(t.v),i=y(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v&&(c[e.parent(r)].externalConnections=!0,n.fromCluster=t.v),i!==t.w&&(c[e.parent(i)].externalConnections=!0,n.toCluster=t.w),l.l.warn("Fix Replacing with XXX",r,i,t.name),e.setEdge(r,i,n,t.name))}),l.l.warn("Adjusted Graph",i.c(e)),b(e,0),l.l.trace(c)},b=(e,t)=>{if(l.l.warn("extractor - ",t,i.c(e),e.children("D")),t>10){l.l.error("Bailing out");return}let n=e.nodes(),r=!1;for(let t of n){let n=e.children(t);r=r||n.length>0}if(!r){l.l.debug("Done, no node has children",e.nodes());return}for(let r of(l.l.debug("Nodes = ",n,t),n))if(l.l.debug("Extracting node",r,c,c[r]&&!c[r].externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",t),c[r]){if(!c[r].externalConnections&&e.children(r)&&e.children(r).length>0){l.l.warn("Cluster without external connections, without a parent and with children",r,t);let n="TB"===e.graph().rankdir?"LR":"TB";c[r]&&c[r].clusterData&&c[r].clusterData.dir&&(n=c[r].clusterData.dir,l.l.warn("Fixing dir",c[r].clusterData.dir,n));let d=new a.k({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});l.l.warn("Old graph before copy",i.c(e)),p(r,e,d,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:c[r].clusterData,labelText:c[r].labelText,graph:d}),l.l.warn("New graph after copy node: (",r,")",i.c(d)),l.l.debug("Old graph after copy",i.c(e))}else l.l.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!c[r].externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),t),l.l.debug(c)}else l.l.debug("Not a cluster",r,t);for(let r of(n=e.nodes(),l.l.warn("New list of nodes",n),n)){let n=e.node(r);l.l.warn(" Now next level",r,n),n.clusterNode&&b(n.graph,t+1)}},C=(e,t)=>{if(0===t.length)return[];let n=Object.assign(t);return t.forEach(t=>{let r=e.children(t),i=C(e,r);n=[...n,...i]}),n},E=e=>C(e,e.children()),N={rect:(e,t)=>{l.l.info("Creating subgraph rect for ",t.id,t);let n=(0,l.c)(),r=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),i=r.insert("rect",":first-child"),a=(0,l.m)(n.flowchart.htmlLabels),c=r.insert("g").attr("class","cluster-label"),h="markdown"===t.labelType?(0,o.a)(c,t.labelText,{style:t.labelStyle,useHtmlLabels:a}):c.node().appendChild((0,d.c)(t.labelText,t.labelStyle,void 0,!0)),g=h.getBBox();if((0,l.m)(n.flowchart.htmlLabels)){let e=h.children[0],t=(0,s.Ys)(h);g=e.getBoundingClientRect(),t.attr("width",g.width),t.attr("height",g.height)}let f=0*t.padding,u=t.width<=g.width+f?g.width+f:t.width;t.width<=g.width+f?t.diff=(g.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,l.l.trace("Data ",t,JSON.stringify(t)),i.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-u/2).attr("y",t.y-t.height/2-f/2).attr("width",u).attr("height",t.height+f);let{subGraphTitleTopMargin:w}=(0,d.g)(n);a?c.attr("transform",`translate(${t.x-g.width/2}, ${t.y-t.height/2+w})`):c.attr("transform",`translate(${t.x}, ${t.y-t.height/2+w})`);let p=i.node().getBBox();return t.width=p.width,t.height=p.height,t.intersect=function(e){return(0,d.i)(t,e)},r},roundedWithTitle:(e,t)=>{let n=(0,l.c)(),r=e.insert("g").attr("class",t.classes).attr("id",t.id),i=r.insert("rect",":first-child"),a=r.insert("g").attr("class","cluster-label"),o=r.append("rect"),c=a.node().appendChild((0,d.c)(t.labelText,t.labelStyle,void 0,!0)),h=c.getBBox();if((0,l.m)(n.flowchart.htmlLabels)){let e=c.children[0],t=(0,s.Ys)(c);h=e.getBoundingClientRect(),t.attr("width",h.width),t.attr("height",h.height)}h=c.getBBox();let g=0*t.padding,f=g/2,u=t.width<=h.width+t.padding?h.width+t.padding:t.width;t.width<=h.width+t.padding?t.diff=(h.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,i.attr("class","outer").attr("x",t.x-u/2-f).attr("y",t.y-t.height/2-f).attr("width",u+g).attr("height",t.height+g),o.attr("class","inner").attr("x",t.x-u/2-f).attr("y",t.y-t.height/2-f+h.height-1).attr("width",u+g).attr("height",t.height+g-h.height-3);let{subGraphTitleTopMargin:w}=(0,d.g)(n);a.attr("transform",`translate(${t.x-h.width/2}, ${t.y-t.height/2-t.padding/3+((0,l.m)(n.flowchart.htmlLabels)?5:3)+w})`);let p=i.node().getBBox();return t.height=p.height,t.intersect=function(e){return(0,d.i)(t,e)},r},noteGroup:(e,t)=>{let n=e.insert("g").attr("class","note-cluster").attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,l=i/2;r.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-l).attr("y",t.y-t.height/2-l).attr("width",t.width+i).attr("height",t.height+i).attr("fill","none");let a=r.node().getBBox();return t.width=a.width,t.height=a.height,t.intersect=function(e){return(0,d.i)(t,e)},n},divider:(e,t)=>{let n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding;r.attr("class","divider").attr("x",t.x-t.width/2-i/2).attr("y",t.y-t.height/2).attr("width",t.width+i).attr("height",t.height+i);let l=r.node().getBBox();return t.width=l.width,t.height=l.height,t.diff=-t.padding/2,t.intersect=function(e){return(0,d.i)(t,e)},n}},X={},S=(e,t)=>{l.l.trace("Inserting cluster");let n=t.shape||"rect";X[t.id]=N[n](e,t)},_=()=>{X={}},j=async(e,t,n,a,o,s)=>{l.l.info("Graph in recursive render: XXX",i.c(t),o);let h=t.graph().rankdir;l.l.trace("Dir in recursive render - dir:",h);let g=e.insert("g").attr("class","root");t.nodes()?l.l.info("Recursive render XXX",t.nodes()):l.l.info("No nodes found for",t),t.edges().length>0&&l.l.trace("Recursive edges",t.edge(t.edges()[0]));let f=g.insert("g").attr("class","clusters"),u=g.insert("g").attr("class","edgePaths"),w=g.insert("g").attr("class","edgeLabels"),p=g.insert("g").attr("class","nodes");await Promise.all(t.nodes().map(async function(e){let r=t.node(e);if(void 0!==o){let n=JSON.parse(JSON.stringify(o.clusterData));l.l.info("Setting data for cluster XXX (",e,") ",n,o),t.setNode(o.id,n),!t.parent(e)&&(l.l.trace("Setting parent",e,o.id),t.setParent(e,o.id,n))}if(l.l.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),r&&r.clusterNode){l.l.info("Cluster identified",e,r.width,t.node(e));let i=await j(p,r.graph,n,a,t.node(e),s),o=i.elem;(0,d.u)(r,o),r.diff=i.diff||0,l.l.info("Node bounds (abc123)",e,r,r.width,r.x,r.y),(0,d.s)(o,r),l.l.warn("Recursive render complete ",o,r)}else t.children(e).length>0?(l.l.info("Cluster - the non recursive path XXX",e,r.id,r,t),l.l.info(v(r.id,t)),c[r.id]={id:v(r.id,t),node:r}):(l.l.info("Node - the non recursive path",e,r.id,r),await (0,d.e)(p,t.node(e),h))})),t.edges().forEach(function(e){let n=t.edge(e.v,e.w,e.name);l.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),l.l.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),l.l.info("Fix",c,"ids:",e.v,e.w,"Translating: ",c[e.v],c[e.w]),(0,d.f)(w,n)}),t.edges().forEach(function(e){l.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))}),l.l.info("#############################################"),l.l.info("###                Layout                 ###"),l.l.info("#############################################"),l.l.info(t),(0,r.bK)(t),l.l.info("Graph after layout:",i.c(t));let m=0,{subGraphTitleTotalMargin:y}=(0,d.g)(s);return E(t).forEach(function(e){let n=t.node(e);l.l.info("Position "+e+": "+JSON.stringify(t.node(e))),l.l.info("Position "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n&&n.clusterNode?(n.y+=y,(0,d.p)(n)):t.children(e).length>0?(n.height+=y,S(f,n),c[n.id].node=n):(n.y+=y/2,(0,d.p)(n))}),t.edges().forEach(function(e){let r=t.edge(e);l.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(r),r),r.points.forEach(e=>e.y+=y/2);let i=(0,d.h)(u,e,r,c,n,t,a);(0,d.j)(r,i)}),t.nodes().forEach(function(e){let n=t.node(e);l.l.info(e,n.type,n.diff),"group"===n.type&&(m=n.diff)}),{elem:g,diff:m}},D=async(e,t,n,r,a)=>{(0,d.a)(e,n,r,a),(0,d.b)(),(0,d.d)(),_(),f(),l.l.warn("Graph at first:",JSON.stringify(i.c(t))),x(t),l.l.warn("Graph after:",JSON.stringify(i.c(t)));let o=(0,l.c)();await j(e,t,r,a,void 0,o)}}}]);