"use strict";(globalThis.webpackChunk_mention_me_frontend=globalThis.webpackChunk_mention_me_frontend||[]).push([["3808"],{"./src/shared/components/ImageCrop/ImageCrop.stories.tsx":function(e,t,a){a.r(t),a.d(t,{WithoutAspectRatio:()=>h,default:()=>g,WithControlledValues:()=>u,WithImageFile:()=>c,Default:()=>l});var n=a("../node_modules/react/jsx-runtime.js"),o=a("../node_modules/react/index.js"),s=a("../node_modules/@mention-me/flamingo-ui/build/index.es.js");let r=e=>{let t=(0,o.useMemo)(()=>{if(e)return URL.createObjectURL(e)},[e]);return(0,o.useEffect)(()=>()=>{t&&URL.revokeObjectURL(t)},[t,e]),t};var i=a("./src/shared/components/Dropzone/index.ts"),p=a("./src/shared/components/ImageCrop/hooks/useImageCrop.ts"),d=a("./src/shared/components/ImageCrop/ImageCrop.tsx");let m=a.p+"static/image/static/media/fred.477a9069.jpg",g={title:"Shared / ImageCrop",component:d.x,decorators:[e=>(0,n.jsx)("div",{style:{maxWidth:"1200px",margin:"0 auto"},children:(0,n.jsx)(e,{})})],parameters:{layout:"padded"}},l={render:()=>{let[e,t]=(0,o.useState)(void 0),a=(0,p.P)({image:m,aspect:2.25}),r=async()=>{t(await a.getCroppedImage())};return(0,n.jsxs)("div",{children:[(0,n.jsx)(d.x,{...a}),(0,n.jsx)("br",{}),(0,n.jsx)("span",{style:{display:"flex",gap:"8px"},children:(0,n.jsx)(s.zx,{onClick:r,children:"Set image"})}),(0,n.jsx)("br",{}),e&&(0,n.jsx)("div",{children:(0,n.jsx)("img",{src:a.getImageAsDataUrl(e),width:400,alt:"Output"})})]})}},c={render:()=>{let[e,t]=(0,o.useState)(void 0),[a,m]=(0,o.useState)(),[g,l]=(0,o.useState)(!1),c=r(a),u=(0,p.P)({image:c,blob:a}),h=async()=>{l(!0),t(await u.getCroppedImage()),l(!1)};return(0,n.jsxs)("div",{children:[(0,n.jsx)(i.Z,{onDrop:e=>{let[t]=e;return m(t)},multiple:!1}),(0,n.jsx)("br",{}),(0,n.jsx)(d.x,{...u}),(0,n.jsx)("br",{}),(0,n.jsx)("span",{style:{display:"flex",gap:"8px"},children:(0,n.jsx)(s.zx,{onClick:h,isLoading:g,children:"Set image"})}),(0,n.jsx)("br",{}),e&&(0,n.jsx)("div",{children:(0,n.jsx)("img",{src:u.getImageAsDataUrl(e),width:400,alt:"Output"})})]})}},u={render:()=>{let[e,t]=(0,o.useState)(1),[a,r]=(0,o.useState)(0),i=(0,p.P)({image:m,zoom:e,rotation:a,onZoomChange:t,onRotationChange:r});return(0,n.jsxs)("div",{children:[(0,n.jsx)(d.x,{...i}),(0,n.jsx)("br",{}),(0,n.jsxs)("span",{style:{display:"flex",gap:"8px"},children:[(0,n.jsx)(s.zx,{onClick:()=>t(e=>2===e?1:2),children:"Set zoom"}),(0,n.jsx)(s.zx,{onClick:()=>r(e=>90===e?0:90),children:"Set rotation"})]})]})}},h={render:()=>{let[e,t]=(0,o.useState)(void 0),a=(0,p.P)({image:m}),r=async()=>{t(await a.getCroppedImage())};return(0,n.jsxs)("div",{children:[(0,n.jsx)(d.x,{...a}),(0,n.jsx)("br",{}),(0,n.jsx)("span",{style:{display:"flex",gap:"8px"},children:(0,n.jsx)(s.zx,{onClick:r,children:"Set image"})}),(0,n.jsx)("br",{}),e&&(0,n.jsx)("div",{children:(0,n.jsx)("img",{src:a.getImageAsDataUrl(e),width:400,alt:"Output"})})]})}};l.parameters={...l.parameters,docs:{...l.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [image, setImage] = useState<Blob | undefined>(undefined);\n    const imageCrop = useImageCrop({\n      image: fredImage,\n      aspect: 1080 / 480\n    });\n    const getImage = async () => {\n      const croppedImage = await imageCrop.getCroppedImage();\n      setImage(croppedImage);\n    };\n    return <div>\n                <ImageCrop {...imageCrop} />\n                <br />\n                <span style={{\n        display: "flex",\n        gap: "8px"\n      }}>\n                    <Button onClick={getImage}>Set image</Button>\n                </span>\n                <br />\n                {image && <div>\n                        <img src={imageCrop.getImageAsDataUrl(image)} width={400} alt="Output" />\n                    </div>}\n            </div>;\n  }\n} satisfies Story',...l.parameters?.docs?.source},description:{story:"Renders the image crop tool with a default image. The crop tool handles\nzoom, rotation, flip and cropping of the image, as well as providing a\ncallback to get the cropped image as a blob.",...l.parameters?.docs?.description}}},c.parameters={...c.parameters,docs:{...c.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [croppedImage, setCroppedImage] = useState<Blob | undefined>(undefined);\n    const [blob, setBlob] = useState<Blob>();\n    const [isLoading, setIsLoading] = useState(false);\n    const imageURL = useObjectURL(blob);\n    const imageCrop = useImageCrop({\n      image: imageURL,\n      blob\n    });\n    const getImage = async () => {\n      setIsLoading(true);\n      const image = await imageCrop.getCroppedImage();\n      setCroppedImage(image);\n      setIsLoading(false);\n    };\n    return <div>\n                <Dropzone onDrop={([file]) => setBlob(file)} multiple={false} />\n                <br />\n                <ImageCrop {...imageCrop} />\n                <br />\n                <span style={{\n        display: "flex",\n        gap: "8px"\n      }}>\n                    <Button onClick={getImage} isLoading={isLoading}>\n                        Set image\n                    </Button>\n                </span>\n                <br />\n                {croppedImage && <div>\n                        <img src={imageCrop.getImageAsDataUrl(croppedImage)} width={400} alt="Output" />\n                    </div>}\n            </div>;\n  }\n} satisfies Story',...c.parameters?.docs?.source},description:{story:"Renders the image crop tool with a default image. The crop tool handles\nzoom, rotation, flip and cropping of the image, as well as providing a\ncallback to get the cropped image as a blob.",...c.parameters?.docs?.description}}},u.parameters={...u.parameters,docs:{...u.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [zoom, setZoom] = useState(1);\n    const [rotation, setRotation] = useState(0);\n    const imageCrop = useImageCrop({\n      image: fredImage,\n      zoom,\n      rotation,\n      onZoomChange: setZoom,\n      onRotationChange: setRotation\n    });\n    return <div>\n                <ImageCrop {...imageCrop} />\n                <br />\n                <span style={{\n        display: "flex",\n        gap: "8px"\n      }}>\n                    <Button onClick={() => setZoom(prev => prev === 2 ? 1 : 2)}>Set zoom</Button>\n                    <Button onClick={() => setRotation(prev => prev === 90 ? 0 : 90)}>Set rotation</Button>\n                </span>\n            </div>;\n  }\n} satisfies Story',...u.parameters?.docs?.source},description:{story:"It is possible to take control of the state of values like zoom and rotation, by passing\nthem as props to the `useImageCrop` hook. This allows the parent component to control the\nvalues of the image crop tool. Note: the parent component becomes responsible for\nupdating the values, so the `onZoomChange` and `onRotationChange` callbacks must be provided with\nhandlers that update the state of the parent component.",...u.parameters?.docs?.description}}},h.parameters={...h.parameters,docs:{...h.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [image, setImage] = useState<Blob | undefined>(undefined);\n    const imageCrop = useImageCrop({\n      image: fredImage\n    });\n    const getImage = async () => {\n      const croppedImage = await imageCrop.getCroppedImage();\n      setImage(croppedImage);\n    };\n    return <div>\n                <ImageCrop {...imageCrop} />\n                <br />\n                <span style={{\n        display: "flex",\n        gap: "8px"\n      }}>\n                    <Button onClick={getImage}>Set image</Button>\n                </span>\n                <br />\n                {image && <div>\n                        <img src={imageCrop.getImageAsDataUrl(image)} width={400} alt="Output" />\n                    </div>}\n            </div>;\n  }\n} satisfies Story',...h.parameters?.docs?.source},description:{story:"Renders the image crop tool with a default image. The crop tool handles\nzoom, rotation, flip and cropping of the image, as well as providing a\ncallback to get the cropped image as a blob.",...h.parameters?.docs?.description}}}}}]);