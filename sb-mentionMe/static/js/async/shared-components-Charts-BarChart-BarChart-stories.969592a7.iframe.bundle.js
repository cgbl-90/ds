"use strict";(globalThis.webpackChunk_mention_me_frontend=globalThis.webpackChunk_mention_me_frontend||[]).push([["7852"],{"./src/shared/components/Charts/BarChart/BarChart.stories.tsx":function(e,r,a){a.r(r),a.d(r,{CustomColors:function(){return c},CustomTooltipLabel:function(){return i},Default:function(){return u},Skeleton:function(){return l},SkeletonGrouped:function(){return d},SkeletonStacked:function(){return p},default:function(){return n}});var o=a("../node_modules/react/jsx-runtime.js"),t=a("./src/shared/components/Charts/BarChart/__mocks__/barChartSkeletonData.ts"),s=a("./src/shared/components/Charts/BarChart/BarChart.tsx");let n={title:"Charts / BarChart",component:s.Z,decorators:[e=>(0,o.jsx)("div",{style:{padding:"32px",width:"820px"},children:(0,o.jsx)(e,{})})],args:{data:t.O,keys:["value","comparisonValue"],colors:["MidnightBlue40Light","MidnightBlueBase"],groupMode:"grouped",indexBy:"name",wrapperStyles:{height:"400px"},getTooltipValue:e=>{let{id:r,data:a}=e;return"value"===r?a.value:a.comparisonValue},labelTextColor:e=>{let{data:r}=e;return"comparisonValue"===r.id?"White":"NavyBase"}}},u={},c={args:{colors:["UltraViolet40Light","UltraVioletBase"]}},i={args:{getTooltipLabel:e=>`I am a custom label ${e.data.comparisonValue}`}},l={args:{groupMode:void 0},render:e=>(0,o.jsx)(s.Z.Skeleton,{...e})},d={render:e=>(0,o.jsx)(s.Z.Skeleton,{...e,groupMode:"grouped"})},p={render:e=>(0,o.jsx)(s.Z.Skeleton,{...e,groupMode:"stacked"})};u.parameters={...u.parameters,docs:{...u.parameters?.docs,source:{originalSource:"{} satisfies Story",...u.parameters?.docs?.source}}},c.parameters={...c.parameters,docs:{...c.parameters?.docs,source:{originalSource:'{\n  args: {\n    colors: ["UltraViolet40Light", "UltraVioletBase"]\n  }\n} satisfies Story',...c.parameters?.docs?.source}}},i.parameters={...i.parameters,docs:{...i.parameters?.docs,source:{originalSource:"{\n  args: {\n    getTooltipLabel: d => `I am a custom label ${d.data.comparisonValue}`\n  }\n} satisfies Story",...i.parameters?.docs?.source}}},l.parameters={...l.parameters,docs:{...l.parameters?.docs,source:{originalSource:"{\n  args: {\n    groupMode: undefined\n  },\n  render: args => {\n    return <BarChart.Skeleton {...args} />;\n  }\n} satisfies Story",...l.parameters?.docs?.source}}},d.parameters={...d.parameters,docs:{...d.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    return <BarChart.Skeleton {...args} groupMode="grouped" />;\n  }\n} satisfies Story',...d.parameters?.docs?.source}}},p.parameters={...p.parameters,docs:{...p.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    return <BarChart.Skeleton {...args} groupMode="stacked" />;\n  }\n} satisfies Story',...p.parameters?.docs?.source}}}}}]);